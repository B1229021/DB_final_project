<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>相約系統</title>
    <style>
        /* ...原有 CSS 全部保留... */

        /* ========== 管理者按鈕樣式 ========== */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box; /* 讓邊框和內距包含在元素總寬度內 */
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            /* 設定漸層背景色 */
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; /* 確保頁面至少佔滿整個視窗高度 */
            color: #333;
        }

        /* ========== 主要容器樣式 ========== */
        .container {
            max-width: 1200px;
            margin: 0 auto; /* 水平置中 */
            padding: 0 15px;
            min-height: 100vh;
        }

        /* ========== 頁面標題區域 ========== */
        .header {
            background: rgba(255, 255, 255, 0.95); /* 半透明白色背景 */
            backdrop-filter: blur(10px); /* 背景模糊效果 */
            padding: 1rem;
            border-radius: 15px;
            margin: 1rem 0;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1); /* 陰影效果 */
            text-align: center;
        }

        .header h1 {
            color: #764ba2;
            font-size: 1.8rem;
            font-weight: 700;
        }

        /* ========== 控制面板樣式 ========== */
        .control-panel {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 15px; /* 元素間距 */
            flex-wrap: wrap; /* 允許換行 */
            align-items: center;
        }

        /* ========== 按鈕基礎樣式 ========== */
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px; /* 圓角按鈕 */
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9rem;
            transition: all 0.3s ease; /* 平滑過渡效果 */
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        /* 主要按鈕樣式（漸層藍紫色） */
        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px); /* 懸停時向上移動 */
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }

        /* 次要按鈕樣式（灰色） */
        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #ddd;
        }

        /* 危險按鈕樣式（紅色） */
        .btn-danger {
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 107, 107, 0.3);
        }

        /* ========== 表單控制項樣式 ========== */
        .select-dropdown, .time-input {
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 0.9rem;
            background: white;
            transition: all 0.3s ease;
            min-width: 150px;
        }

        /* ========== 活動列表網格佈局 ========== */
        .events-list {
            display: grid;
            /* 響應式網格：每列最少300px寬度，自動填滿 */
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem; /* 網格間距 */
            margin-bottom: 2rem;
        }

        /* ========== 活動卡片樣式 ========== */
        .event-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer; /* 滑鼠指標變成手型 */
        }

        /* 卡片懸停效果 */
        .event-card:hover {
            transform: translateY(-5px); /* 向上浮起效果 */
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        /* 活動卡片頭部區域 */
        .event-header {
            display: flex;
            justify-content: space-between; /* 兩端對齊 */
            align-items: center;
            margin-bottom: 1rem;
        }

        /* 活動類別標籤 */
        .event-category {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        /* 活動時間顯示 */
        .event-time {
            color: #666;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* ========== 活動詳情區域 ========== */
        .event-details {
            margin-bottom: 1rem;
        }

        /* 每個詳情項目 */
        .event-detail-item {
            display: flex;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        /* 詳情標籤（如：活動、出發等） */
        .event-detail-label {
            font-weight: 600;
            color: #555;
            min-width: 80px; /* 固定寬度讓對齊更整齊 */
        }

        /* 詳情值 */
        .event-detail-value {
            color: #777;
            flex: 1; /* 佔據剩餘空間 */
        }
        .admin-btn {
            position: absolute;
            top: 18px;
            right: 32px;
            z-index: 10;
            background: linear-gradient(45deg, #ff9800, #ff5722);
            color: white;
            border: none;
            border-radius: 18px;
            padding: 10px 22px;
            font-weight: bold;
            font-size: 1rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.12);
            cursor: pointer;
            transition: all 0.2s;
        }
        .admin-btn:hover {
            background: linear-gradient(45deg, #ff5722, #ff9800);
        }

        .avatar-list {
            display: flex;
            flex-direction: row;
            gap: 0.5rem;
            align-items: center;
        }
        .avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            overflow: hidden;
            border: 2px solid #fff;
            box-shadow: 0 2px 6px rgba(100,80,150,0.09);
            cursor: pointer;
            position: relative;
        }
        .avatar.creator::after {
            content: '👑';
            position: absolute;
            right: -10px;
            top: -10px;
            font-size: 1rem;
        }
        .avatar:hover {
            outline: 2px solid #764ba2;
        }

        /* 評價彈窗 */
        .user-review-modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.35);
        }
        .user-review-content {
            background: #fff;
            border-radius: 20px;
            width: 90%;
            max-width: 400px;
            margin: 6% auto;
            padding: 1.5rem 1rem 1rem 1rem;
            box-shadow: 0 18px 44px rgba(0,0,0,0.24);
            position: relative;
        }
        .close-user-review {
            position: absolute;
            top: 14px;
            right: 18px;
            font-size: 1.5rem;
            cursor: pointer;
            color: #888;
        }
        .user-review-header {
            text-align: center;
            margin-bottom: 1.2rem;
        }
        .user-review-header img {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            border: 3px solid #764ba2;
        }
        .user-review-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: #764ba2;
            margin-top: 0.3rem;
        }
        .user-review-gb {
            margin: 0.4rem 0 1rem 0;
            font-size: 1rem;
        }
        .review-msg-list {
            max-height: 160px;
            overflow-y: auto;
            margin-top: 0.7rem;
        }
        .review-msg-item {
            font-size: 0.97rem;
            padding: 0.3rem 0.2rem;
            border-bottom: 1px solid #eee;
        }
        .review-msg-item:last-child { border-bottom: none; }
        /* 性別人數下拉 */
        .gender-selects {
            display: flex;
            gap: 1rem;
        }
        .gender-selects .form-group {
            flex: 1;
            margin-bottom: 0;
        }
        .admin-btn {
            position: absolute;
            top: 18px;
            right: 32px;
            z-index: 100;
            background: linear-gradient(45deg, #ff9800, #ff5722);
            color: white;
            border: none;
            border-radius: 18px;
            padding: 10px 22px;
            font-weight: bold;
            font-size: 1rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.12);
            cursor: pointer;
            transition: all 0.2s;
        }
        .admin-btn:hover {
            background: linear-gradient(45deg, #ff5722, #ff9800);
        }
        /* ========== Modal z-index 修正 ========== */
        .modal {
            z-index: 2001 !important;
        }
        .user-review-modal {
            z-index: 2002 !important;
        }
        .modal {
    display: none;
    position: fixed;
    z-index: 2001;
    left: 0; top: 0;
    width: 100vw; height: 100vh;
    background: rgba(0,0,0,0.35);
    justify-content: center;
    align-items: center;
}
.modal.show {
    display: flex;
}
.modal-content {
    background: #fff;
    border-radius: 20px;
    min-width: 340px;
    max-width: 430px;
    width: 96%;
    box-shadow: 0 18px 44px rgba(0,0,0,0.24);
    position: relative;
    padding: 2rem 2rem 1.2rem 2rem;
    animation: modalFadeIn 0.32s;
}
@keyframes modalFadeIn {
    from { opacity: 0; transform: translateY(30px);}
    to { opacity: 1; transform: translateY(0);}
}
.modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.2rem;
}
.modal-header h2 {
    color: #6c48c9;
    font-size: 1.28rem;
    margin: 0;
    font-weight: bold;
}
.close {
    font-size: 1.6rem;
    cursor: pointer;
    color: #888;
    font-weight: bold;
    transition: color 0.2s;
}
.close:hover {
    color: #444;
}
.form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 1.5rem;
}
        /* ...頭像、性別下拉等 CSS 保留... */
    </style>
</head>
<body>
    <div class="container" style="position:relative">
        <!-- 管理者按鈕 -->
        <button class="admin-btn" id="adminBtn">管理者</button>
        <!-- 頁面標題 -->
        <header class="header">
            <h1>相約系統</h1>
        </header>

        <main>
            <!-- 控制面板 -->
            <div class="control-panel">
                <button id="createBtn" class="btn btn-primary">發起活動</button>
                <select id="categoryFilter" class="select-dropdown">
                    <option value="">所有類別</option>
                    <option value="美食">美食</option>
                    <option value="運動">運動</option>
                    <option value="娛樂">娛樂</option>
                    <option value="學習">學習</option>
                    <option value="其他">其他</option>
                </select>
                <input type="datetime-local" id="timeFilter" class="time-input">
                <button id="filterBtn" class="btn btn-secondary">篩選</button>
                <button id="refreshBtn" class="btn btn-secondary">重新載入</button>
            </div>
            <!-- 活動列表 -->
            <div id="eventsList" class="events-list">
                <div class="loading">
                    <div class="spinner"></div>
                </div>
            </div>
        </main>
    </div>

    <!-- 發起活動彈窗 -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>發起活動</h2>
                <span class="close" id="closeCreate">&times;</span>
            </div>
            <form id="createForm">
                <div class="form-group">
                    <label>活動時間:</label>
                    <input type="datetime-local" id="eventTime" required name="eventTime">
                </div>
                <div class="form-group">
                    <label>出發地點:</label>
                    <input type="text" id="startLocation" placeholder="例如：台北車站" required name="startLocation">
                </div>
                <div class="form-group">
                    <label>目的地:</label>
                    <input type="text" id="destination" placeholder="例如：某某餐廳" required name="destination">
                </div>
                <div class="form-group">
                    <label>活動類別:</label>
                    <select id="eventCategory" required name="eventCategory">
                        <option value="">選擇類別</option>
                        <option value="美食">美食</option>
                        <option value="運動">運動</option>
                        <option value="娛樂">娛樂</option>
                        <option value="學習">學習</option>
                        <option value="其他">其他</option>
                    </select>
                </div>
                <!-- 性別人數設定 -->
                <div class="gender-selects" style="margin-bottom:1.5rem;">
                    <div class="form-group">
                        <label>男生人數上限:</label>
                        <select id="maxMale" required name="maxMale">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4" selected>4</option>
                            <option value="5">5</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>女生人數上限:</label>
                        <select id="maxFemale" required name="maxFemale">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label>人數上限(總):</label>
                    <input type="number" id="maxParticipants" min="2" max="20" value="4" required name="maxParticipants">
                </div>
                <div class="form-group">
                    <label>備註說明:</label>
                    <textarea id="description" placeholder="活動詳細說明或特殊要求" name="description"></textarea>
                </div>
                <div class="form-group">
                    <label>聯絡方式:</label>
                    <input type="text" id="contact" placeholder="電話或Line ID" required name="contact">
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">發起活動</button>
                    <button type="button" id="cancelCreate" class="btn btn-secondary">取消</button>
                </div>
            </form>
        </div>
    </div>

    <!-- 活動詳情彈窗 -->
    <div id="detailModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>活動詳情</h2>
                <span class="close" id="closeDetail">&times;</span>
            </div>
            <div id="detailContent"></div>
        </div>
    </div>

    <!-- 用戶評價彈窗 -->
    <div class="user-review-modal" id="userReviewModal">
        <div class="user-review-content" id="userReviewContent">
            <span class="close-user-review" id="closeUserReview">&times;</span>
            <!-- 內容由js生成 -->
        </div>
    </div>

    <script>
        // 模擬admintable uid（可替換為API查詢）
        const adminUidTable = [1, 99, 100];

        // 模擬所有用戶資料庫
        const usersDB = [
            {
                uid: 1, name: 'Jerry', gender: 'male', avatarUrl: 'https://randomuser.me/api/portraits/men/15.jpg',
                review: { good: 8, bad: 1, msgs: ['很準時', '人很友善'] }
            },
            {
                uid: 2, name: 'Amy', gender: 'female', avatarUrl: 'https://randomuser.me/api/portraits/women/11.jpg',
                review: { good: 5, bad: 0, msgs: ['溝通順暢', '活潑開朗'] }
            },
            {
                uid: 3, name: 'Eric', gender: 'male', avatarUrl: 'https://randomuser.me/api/portraits/men/17.jpg',
                review: { good: 2, bad: 2, msgs: ['有點遲到', '還算OK'] }
            },
            {
                uid: 4, name: 'Mary', gender: 'female', avatarUrl: 'https://randomuser.me/api/portraits/women/19.jpg',
                review: { good: 1, bad: 0, msgs: ['很有禮貌'] }
            }
        ];

        // 取得user物件
        function getUserById(uid) {
            return usersDB.find(u => u.uid === uid);
        }

        // 相約系統主類
        class AppointmentSystem {
            constructor() {
                this.apiBaseUrl = 'https://your-api-domain.com/api';
                this.events = [];
                this.currentUserId = 1; // 假設登入者uid=1
                this.currentUser = getUserById(this.currentUserId);
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.loadEvents();
            }
            setupEventListeners() {
                document.getElementById('createBtn').addEventListener('click', () => this.showCreateModal());
                document.getElementById('closeCreate').addEventListener('click', () => this.hideCreateModal());
                document.getElementById('cancelCreate').addEventListener('click', () => this.hideCreateModal());
                document.getElementById('createForm').addEventListener('submit', (e) => this.handleCreateSubmit(e));
                document.getElementById('closeDetail').addEventListener('click', () => this.hideDetailModal());
                document.getElementById('filterBtn').addEventListener('click', () => this.filterEvents());
                document.getElementById('refreshBtn').addEventListener('click', () => this.loadEvents());
                document.getElementById('adminBtn').addEventListener('click', () => this.handleAdminLogin());
                window.addEventListener('mousedown', (e) => {
                    // 修正：只有點擊黑色遮罩才關閉modal，避免誤關
                    if (e.target.classList.contains('modal') && e.target.style.display === 'block') {
                        e.target.style.display = 'none';
                    }
                    if (e.target.classList.contains('user-review-modal') && e.target.style.display === 'block') {
                        this.hideUserReviewModal();
                    }
                });
                document.getElementById('closeUserReview').addEventListener('click', () => this.hideUserReviewModal());
            }

            async loadEvents() {
                this.showLoading();
                document.getElementById('categoryFilter').value = '';
                document.getElementById('timeFilter').value = '';
                const events = await this.getMockEvents();
                this.events = events;
                this.renderEvents(events);
            }
            // 模擬活動資料
            async getMockEvents() {
                return new Promise(resolve => {
                    setTimeout(() => {
                        resolve([
                            {
                                id: 1,
                                title: '西門町美食之旅',
                                category: '美食',
                                time: '2025-05-25T19:00',
                                startLocation: '台北車站',
                                destination: '西門町',
                                description: '一起去西門町吃美食！',
                                maxParticipants: 4,
                                maxMale: 2,
                                maxFemale: 2,
                                participants: [1, 2], // uid
                                creatorId: 2,
                                contact: 'Line: foodlover123',
                                createdAt: '2025-05-22T10:00:00'
                            },
                            {
                                id: 2,
                                title: '信義區電影約會',
                                category: '娛樂',
                                time: '2025-05-26T15:00',
                                startLocation: '市政府站',
                                destination: '信義威秀',
                                description: '看最新上映的電影',
                                maxParticipants: 6,
                                maxMale: 3,
                                maxFemale: 3,
                                participants: [1, 3, 4],
                                creatorId: 1,
                                contact: '0912-345-678',
                                createdAt: '2025-05-22T14:30:00'
                            }
                        ]);
                    }, 800);
                });
            }
            async createEvent(eventData) {
                // 實際應連API
                const result = { success: true, id: Date.now(), message: '活動發起成功' };
                if (result.success) {
                    const newEvent = {
                        ...eventData,
                        id: result.id,
                        participants: [this.currentUserId],
                        creatorId: this.currentUserId,
                        createdAt: new Date().toISOString()
                    };
                    this.events.unshift(newEvent);
                }
                return result;
            }
            // 參加活動
            async joinEvent(eventId) {
                const event = this.events.find(e => e.id === eventId);
                if (!event) return this.showNotification('活動不存在', 'error');
                if (event.participants.includes(this.currentUserId)) return this.showNotification('您已參與', 'error');
                if (event.participants.length >= event.maxParticipants) return this.showNotification('活動已滿', 'error');

                const user = getUserById(this.currentUserId);
                // 計算現有男女
                let male = 0, female = 0;
                event.participants.forEach(uid => {
                    const u = getUserById(uid);
                    if (!u) return;
                    if (u.gender === 'male') male++;
                    else if (u.gender === 'female') female++;
                });
                if (user.gender === 'male' && male >= event.maxMale) return this.showNotification('男生名額已滿', 'error');
                if (user.gender === 'female' && female >= event.maxFemale) return this.showNotification('女生名額已滿', 'error');

                event.participants.push(this.currentUserId);
                this.showNotification('成功加入活動', 'success');
                this.renderEvents(this.events);
            }
            async leaveEvent(eventId) {
                const event = this.events.find(e => e.id === eventId);
                if (!event) return this.showNotification('活動不存在', 'error');
                if (event.creatorId === this.currentUserId) return this.showNotification('發起人無法取消參與，請取消活動', 'error');
                const idx = event.participants.indexOf(this.currentUserId);
                if (idx === -1) return this.showNotification('您未參與', 'error');
                event.participants.splice(idx, 1);
                this.showNotification('已取消參與', 'success');
                this.renderEvents(this.events);
            }
            async cancelEvent(eventId) {
                const idx = this.events.findIndex(e => e.id === eventId);
                if (idx === -1) return this.showNotification('活動不存在', 'error');
                if (this.events[idx].creatorId !== this.currentUserId) return this.showNotification('只有發起人可取消', 'error');
                if (!confirm('確定要取消？')) return;
                this.events.splice(idx, 1);
                this.showNotification('活動已取消', 'success');
                this.renderEvents(this.events);
            }
            showLoading() {
                document.getElementById('eventsList').innerHTML = `
                    <div class="loading"><div class="spinner"></div></div>
                `;
            }
            // 活動卡片渲染
            renderEvents(events) {
                const eventsList = document.getElementById('eventsList');
                if (events.length === 0) {
                    eventsList.innerHTML = `
                        <div class="empty-state">
                            <h3>暫無活動</h3>
                            <p>目前沒有活動，發起一個新活動吧！</p>
                            <button class="btn btn-primary" onclick="app.showCreateModal()">發起活動</button>
                        </div>`;
                    return;
                }
                eventsList.innerHTML = events.map(event => {
                    // 男女現況
                    let male = 0, female = 0;
                    let avatarsHtml = '';
                    event.participants.forEach(uid => {
                        const u = getUserById(uid);
                        if (!u) return;
                        if (u.gender === 'male') male++; else if (u.gender === 'female') female++;
                        avatarsHtml += `<div class="avatar${uid===event.creatorId?' creator':''}" title="${u.name}" onclick="event.stopPropagation(); app.showUserReview(${uid})">
                            <img src="${u.avatarUrl}" alt="${u.name}" />
                        </div>`;
                    });
                    const isFull = event.participants.length >= event.maxParticipants;
                    const isCreator = event.creatorId === this.currentUserId;
                    const isJoined = event.participants.includes(this.currentUserId);

                    let actionBtn = '';
                    if (isCreator) {
                        actionBtn = `<button class="btn btn-danger join-btn" onclick="event.stopPropagation(); app.cancelEvent(${event.id})">取消活動</button>`;
                    } else if (isJoined) {
                        actionBtn = `<button class="btn btn-secondary join-btn" onclick="event.stopPropagation(); app.leaveEvent(${event.id})">取消參與</button>`;
                    } else if (isFull) {
                        actionBtn = `<span class="btn btn-secondary join-btn">已滿</span>`;
                    } else {
                        // 性別邏輯提示
                        const user = getUserById(this.currentUserId);
                        let genderWarn = '';
                        if (user.gender === 'male' && male >= event.maxMale) genderWarn = '男生名額已滿';
                        if (user.gender === 'female' && female >= event.maxFemale) genderWarn = '女生名額已滿';
                        if (genderWarn) {
                            actionBtn = `<span class="btn btn-secondary join-btn">${genderWarn}</span>`;
                        } else {
                            actionBtn = `<button class="btn btn-primary join-btn" onclick="event.stopPropagation(); app.joinEvent(${event.id})">加入 +1</button>`;
                        }
                    }

                    return `
                    <div class="event-card" onclick="app.showEventDetail(${event.id})">
                        <div class="event-header">
                            <span class="event-category">${event.category}</span>
                            <span class="event-time">${this.formatDateTime(event.time)}</span>
                        </div>
                        <div class="event-details">
                            <div class="event-detail-item"><span class="event-detail-label">活動:</span>
                                <span class="event-detail-value">${event.title || event.destination}</span></div>
                            <div class="event-detail-item"><span class="event-detail-label">出發:</span>
                                <span class="event-detail-value">${event.startLocation}</span></div>
                            <div class="event-detail-item"><span class="event-detail-label">目的地:</span>
                                <span class="event-detail-value">${event.destination}</span></div>
                            ${event.description ? `<div class="event-detail-item"><span class="event-detail-label">說明:</span>
                                <span class="event-detail-value">${event.description}</span></div>` : ''}
                            <div class="event-detail-item">
                                <span class="event-detail-label">人數:</span>
                                <span class="event-detail-value">${event.participants.length}/${event.maxParticipants}（男${male}/${event.maxMale} 女${female}/${event.maxFemale}）</span>
                            </div>
                        </div>
                        <div class="event-footer">
                            <div class="avatar-list">${avatarsHtml}</div>
                            ${actionBtn}
                        </div>
                    </div>`;
                }).join('');
            }
            showCreateModal() {
    document.getElementById('createModal').classList.add('show');
}
hideCreateModal() {
    document.getElementById('createModal').classList.remove('show');
    document.getElementById('createForm').reset();
}
            async handleCreateSubmit(e) {
                e.preventDefault();
                // 直接用 FormData 取值，避免 id cache 問題
                const formData = new FormData(e.target);
                const eventData = {
                    title: formData.get('destination'),
                    category: formData.get('eventCategory'),
                    time: formData.get('eventTime'),
                    startLocation: formData.get('startLocation'),
                    destination: formData.get('destination'),
                    description: formData.get('description'),
                    maxParticipants: parseInt(formData.get('maxParticipants')),
                    contact: formData.get('contact'),
                    maxMale: parseInt(formData.get('maxMale')),
                    maxFemale: parseInt(formData.get('maxFemale'))
                };
                if (eventData.maxMale + eventData.maxFemale > eventData.maxParticipants) {
                    this.showNotification('男女總人數不可超過總人數上限', 'error'); return;
                }
                if (eventData.maxMale + eventData.maxFemale < eventData.maxParticipants) {
                    this.showNotification('男女人數總和須等於總上限', 'error'); return;
                }
                const result = await this.createEvent(eventData);
                if (result.success) {
                    this.showNotification('活動發起成功！', 'success');
                    this.hideCreateModal();
                    this.renderEvents(this.events);
                } else {
                    this.showNotification('發起活動失敗', 'error');
                }
            }
            showEventDetail(eventId) {
                const event = this.events.find(e => e.id === eventId);
                if (!event) return;
                let male = 0, female = 0;
                let avatarsHtml = '';
                event.participants.forEach(uid => {
                    const u = getUserById(uid);
                    if (!u) return;
                    if (u.gender === 'male') male++; else if (u.gender === 'female') female++;
                    avatarsHtml += `<div class="avatar${uid===event.creatorId?' creator':''}" title="${u.name}" onclick="app.showUserReview(${uid});event.stopPropagation();">
                        <img src="${u.avatarUrl}" alt="${u.name}" />
                    </div>`;
                });
                const isFull = event.participants.length >= event.maxParticipants;
                const isCreator = event.creatorId === this.currentUserId;
                const isJoined = event.participants.includes(this.currentUserId);

                let actionBtn = '';
                if (isCreator) {
                    actionBtn = `<button class="btn btn-danger" onclick="app.cancelEvent(${event.id}); app.hideDetailModal();">取消活動</button>`;
                } else if (isJoined) {
                    actionBtn = `<button class="btn btn-secondary" onclick="app.leaveEvent(${event.id}); app.hideDetailModal();">取消參與</button>`;
                } else if (isFull) {
                    actionBtn = `<span class="btn btn-secondary">活動已滿</span>`;
                } else {
                    const user = getUserById(this.currentUserId);
                    let genderWarn = '';
                    if (user.gender === 'male' && male >= event.maxMale) genderWarn = '男生名額已滿';
                    if (user.gender === 'female' && female >= event.maxFemale) genderWarn = '女生名額已滿';
                    if (genderWarn) {
                        actionBtn = `<span class="btn btn-secondary">${genderWarn}</span>`;
                    } else {
                        actionBtn = `<button class="btn btn-primary" onclick="app.joinEvent(${event.id}); app.hideDetailModal();">加入活動</button>`;
                    }
                }
                document.getElementById('detailContent').innerHTML = `
                    <div style="padding: 1.5rem;">
                        <div class="event-detail-item"><span class="event-detail-label">活動時間:</span>
                            <span class="event-detail-value">${this.formatDateTime(event.time)}</span></div>
                        <div class="event-detail-item"><span class="event-detail-label">出發地點:</span>
                            <span class="event-detail-value">${event.startLocation}</span></div>
                        <div class="event-detail-item"><span class="event-detail-label">目的地:</span>
                            <span class="event-detail-value">${event.destination}</span></div>
                        <div class="event-detail-item"><span class="event-detail-label">活動類別:</span>
                            <span class="event-detail-value">${event.category}</span></div>
                        <div class="event-detail-item"><span class="event-detail-label">人數:</span>
                            <span class="event-detail-value">${event.participants.length}/${event.maxParticipants}（男${male}/${event.maxMale} 女${female}/${event.maxFemale}）</span></div>
                        ${event.description ? `<div class="event-detail-item"><span class="event-detail-label">備註說明:</span>
                            <span class="event-detail-value">${event.description}</span></div>` : ''}
                        <div class="event-detail-item"><span class="event-detail-label">聯絡方式:</span>
                            <span class="event-detail-value">${event.contact}</span></div>
                        <div class="event-detail-item" style="margin-top:1.2rem;">
                            <span class="event-detail-label">參與者:</span>
                            <span class="event-detail-value avatar-list">${avatarsHtml}</span>
                        </div>
                    </div>
                    <div class="form-actions">
                        ${actionBtn}
                        <button class="btn btn-secondary" onclick="app.hideDetailModal()">關閉</button>
                    </div>
                `;
                document.getElementById('detailModal').style.display = 'block';
            }
            hideDetailModal() {
                document.getElementById('detailModal').style.display = 'none';
            }
            filterEvents() {
                const categoryFilter = document.getElementById('categoryFilter').value;
                const timeFilter = document.getElementById('timeFilter').value;
                let filteredEvents = this.events;
                if (categoryFilter) filteredEvents = filteredEvents.filter(event => event.category === categoryFilter);
                if (timeFilter) {
                    const filterDate = new Date(timeFilter);
                    filteredEvents = filteredEvents.filter(event => new Date(event.time) >= filterDate);
                }
                this.renderEvents(filteredEvents);
            }
            formatDateTime(dateTimeString) {
                const date = new Date(dateTimeString);
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${month}/${day} ${hours}:${minutes}`;
            }
            showNotification(message, type = 'success') {
                const existingNotification = document.querySelector('.notification');
                if (existingNotification) existingNotification.remove();
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                document.body.appendChild(notification);
                setTimeout(() => notification.remove(), 3000);
            }
            // 新增：顯示用戶評價彈窗
            showUserReview(uid) {
                const user = getUserById(uid);
                if (!user) return;
                const review = user.review || { good: 0, bad: 0, msgs: [] };
                let html = `
                    <div class="user-review-header">
                        <img src="${user.avatarUrl}" alt="${user.name}" />
                        <div class="user-review-name">${user.name} ${user.gender === 'male' ? '♂️' : '♀️'}</div>
                        <div class="user-review-gb">👍 ${review.good}　👎 ${review.bad}</div>
                    </div>
                    <div class="review-msg-list">
                        ${review.msgs.length === 0 ? '<div class="review-msg-item">暫無文字評價</div>' : review.msgs.map(msg => `<div class="review-msg-item">${msg}</div>`).join('')}
                    </div>
                `;
                document.getElementById('userReviewContent').innerHTML = `<span class="close-user-review" id="closeUserReview">&times;</span>${html}`;
                document.getElementById('userReviewModal').style.display = 'block';
                document.getElementById('closeUserReview').onclick = () => this.hideUserReviewModal();
            }
            hideUserReviewModal() {
                document.getElementById('userReviewModal').style.display = 'none';
            }
            // 管理者功能
            handleAdminLogin() {
                if (adminUidTable.includes(this.currentUserId)) {
                    window.location.href = "admin.html";
                } else {
                    this.showNotification("您無管理員權限", "error");
                }
            }
        }
        const app = new AppointmentSystem();
        // 讓全局可調用
        window.app = app;
    </script>
</body>
</html>
